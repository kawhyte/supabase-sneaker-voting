-- Migration 020: Create price_alerts table for notification system
-- Stores price drop alerts generated by automated price checking
-- Used by Phase 7.3: Add notification system for price drops

-- Create price_alerts table
CREATE TABLE IF NOT EXISTS price_alerts (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  item_id UUID NOT NULL,
  user_id UUID NOT NULL,
  severity VARCHAR(20) NOT NULL DEFAULT 'medium',
  message TEXT NOT NULL,
  current_price DECIMAL(10, 2) NOT NULL,
  previous_price DECIMAL(10, 2),
  percentage_off INTEGER,
  is_read BOOLEAN DEFAULT FALSE,
  read_at TIMESTAMP DEFAULT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),

  FOREIGN KEY (item_id) REFERENCES items(id) ON DELETE CASCADE,
  FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE
);

-- Create indexes for efficient querying
CREATE INDEX IF NOT EXISTS idx_price_alerts_user_id
ON price_alerts(user_id, created_at DESC);

CREATE INDEX IF NOT EXISTS idx_price_alerts_unread
ON price_alerts(user_id, is_read)
WHERE is_read = FALSE;

CREATE INDEX IF NOT EXISTS idx_price_alerts_item_id
ON price_alerts(item_id, created_at DESC);

-- Enable RLS
ALTER TABLE price_alerts ENABLE ROW LEVEL SECURITY;

-- RLS Policy: Users can only view their own price alerts
CREATE POLICY "Users can view their own price alerts"
ON price_alerts
FOR SELECT
USING (auth.uid() = user_id);

-- RLS Policy: Users can update their own price alerts (mark as read)
CREATE POLICY "Users can update their own price alerts"
ON price_alerts
FOR UPDATE
USING (auth.uid() = user_id);

-- RLS Policy: Edge function can insert alerts with service key
-- (no policy needed as service key bypasses RLS)

-- Add comment
COMMENT ON TABLE price_alerts IS 'Stores price drop notifications for wishlist items. Generated by check-prices edge function.';
COMMENT ON COLUMN price_alerts.severity IS 'Alert severity: low (5-15%), medium (15-30%), high (30%+)';
COMMENT ON COLUMN price_alerts.is_read IS 'Whether user has seen this alert in the UI';
